<?xml version="1.0" encoding="iso-8859-1"?>

<idea-plugin>
    <resource-bundle xmlns="">messages.ScalaCodeInsightBundle</resource-bundle>

    <extensions defaultExtensionNs="com.intellij">
        <generation.toStringClassFilter
                implementation="org.jetbrains.plugins.scala.codeInsight.generation.GenerateToStringScalaClassFilter"/>

        <highlightVisitor implementation="org.jetbrains.plugins.scala.codeInsight.daemon.ScalaRainbowVisitor"/>

        <declarationRangeHandler key="org.jetbrains.plugins.scala.lang.psi.api.statements.ScFunction"
                                 implementationClass="org.jetbrains.plugins.scala.codeInsight.hint.ScFunctionDeclarationRangeHandler"
                                 order="first"/>
        <declarationRangeHandler key="org.jetbrains.plugins.scala.lang.psi.api.toplevel.typedef.ScTemplateDefinition"
                                 implementationClass="org.jetbrains.plugins.scala.codeInsight.hint.ScTemplateDeclarationRangeHandler"
                                 order="first"/>

        <editorAppearanceConfigurable
                instance="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable"/>

        <defaultLiveTemplatesProvider
                implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaDefaultLiveTemplatesProvider"/>
        <liveTemplatePreprocessor
                implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaTemplatePreprocessor"/>
        <liveTemplateContext
                implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaFileTemplateContextType"/>
        <liveTemplateContext
                implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaXmlContextType"/>
        <liveTemplateContext
                implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaCommentContextType"/>
        <liveTemplateContext
                implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaStringContextType"/>
        <liveTemplateContext
                implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaCodeContextType"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaAnnotatedMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaVariableOfTypeMacro$RegularVariable"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaVariableOfTypeMacro$ArrayVariable"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaVariableOfTypeMacro$IterableVariable"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaClassNameMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaComponentTypeOfMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaCurrentPackageMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaExpressionTypeMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaIterableComponentTypeMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaMethodNameMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaMethodParametersMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaMethodReturnTypeMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaQualifiedClassNameMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaSubtypesMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaTypeOfVariableMacro"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaPrimaryConstructorMacro$Params"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaPrimaryConstructorMacro$ParamNames"/>
        <liveTemplateMacro
                implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaPrimaryConstructorMacro$ParamTypes"/>

        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.AddNameToArgumentIntention</className>
        </intentionAction>
        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.ArgumentToBlockExpressionIntention
            </className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.BlockExpressionToArgumentIntention
            </className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.PermuteArgumentsIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.DeMorganLawIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.ExpandBooleanIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>
                org.jetbrains.plugins.scala.codeInsight.intention.booleans.FlipComparisonInInfixExprIntention
            </className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>
                org.jetbrains.plugins.scala.codeInsight.intention.booleans.FlipComparisonInMethodCallExprIntention
            </className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.NegateComparisonIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>
                org.jetbrains.plugins.scala.codeInsight.intention.booleans.ReplaceEqualsOrEqualityInInfixExprIntention
            </className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>
                org.jetbrains.plugins.scala.codeInsight.intention.booleans.ReplaceEqualsOrEqualityInMethodCallExprIntention
            </className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>
                org.jetbrains.plugins.scala.codeInsight.intention.booleans.SimplifyBooleanExprWithLiteralIntention
            </className>
        </intentionAction>

    </extensions>

    <extensions defaultExtensionNs="com.intellij.codeInsight">
        <parameterNameHints language="Scala"
                            implementationClass="org.jetbrains.plugins.scala.codeInsight.hints.ScalaInlayParameterHintsProvider"/>
        <delegateMethods language="Scala"
                         implementationClass="org.jetbrains.plugins.scala.codeInsight.delegate.ScalaGenerateDelegateHandler"/>
    </extensions>

    <project-components>
        <component>
            <implementation-class>org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsPassFactory
            </implementation-class>
        </component>
    </project-components>

    <actions>
        <group id="ScalaGenerateGroup">
            <action id="Scala.GenerateEquals"
                    class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGenerateEqualsAction"
                    text="equals() and hashCode()" description="Generate equals() and hashCode() methods"/>
            <action id="Scala.GenerateToString"
                    class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGenerateToStringAction"
                    text="toString()" description="Generate toString() method"/>
            <action id="Scala.GenerateCompanionObject"
                    class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGenerateCompanionObjectAction"
                    text="Companion object" description="Generate companion object"/>
            <action id="Scala.GenerateProperty"
                    class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGeneratePropertyAction"
                    text="Property (getter and setter)" description="Generate property"/>

            <add-to-group group-id="GenerateGroup"/>
        </group>

        <group id="TypeHintsMenu">
            <action id="ToogleFunctionReturnType"
                    class="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable$ToogleFunctionReturnTypeAction"
                    text="Function return type hints"/>
            <action id="TooglePropertyType"
                    class="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable$TooglePropertyTypeAction"
                    text="Property type hints"/>
            <action id="ToogleLocalVariableType"
                    class="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable$ToogleLocalVariableTypeAction"
                    text="Local variable type hints"/>
            <action id="ToogleForObviousType"
                    class="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable$ToogleObviousTypeAction"
                    text="Obvious types hints"/>
        </group>
    </actions>
</idea-plugin>
